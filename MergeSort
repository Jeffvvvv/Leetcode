MergeSort

Time Complexity: O(log(n))

Souce Code:

public void sort(int[] nums)
	{
		if(nums==null||nums.length==0) return ;
		mergesort(nums, 0, nums.length-1);
	}

	private void mergesort(int[] nums, int low, int high)
	{
		if(low < high)
		{
			int middle = low + (high-low)/2;
			mergesort(nums, low, middle);
			mergesort(nums, middle+1, high);
			merge(nums, low, middle, high);
		}
	}

	private void merge(int[] nums, int low, int middle, int high)
	{
		int[] helper = new int[nums.length];
		for(int i=low;i<=high;i++)
			helper[i] = nums[i];

		int i = low;
		int j = middle + 1;
		int k = low;
		while(i<=middle&&j<=high)
		{
			if(helper[i]<helper[j])
				nums[k++] = helper[i++];
			else
				nums[k++] = helper[j++];
		}
		
		while(i<=middle)
			nums[k++] = helper[i++];
	}
